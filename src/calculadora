use regex::Regex;

fn main(){
    println!("Hola");

    // Regex
    let re_sub = Regex::new(r"(\d+)\s?\-\s?(\d+)").unwrap();
    let re_add = Regex::new(r"(\d+)\s?\+\s?(\d+)").unwrap();
    let re_div = Regex::new(r"(\d+)\s?/\s?(\d+)").unwrap();
    let re_mult = Regex::new(r"(\d+)\s?\*\s?(\d+)").unwrap();
    
    // Traer datos del usuario
    println!("Por favor introduce tu expresion: ");
    let mut expresion = String::new();
    std::io::stdin().read_line(&mut expresion).unwrap();

    loop{
        // Aplicar Division
            let caps = re_div.captures(expresion.as_str());
            if caps.is_none() {
                break;
            }
            let caps = caps.unwrap();
    
            let cap_expression = caps.get(0).unwrap().as_str();
            let left_value : i32 = caps.get(1).unwrap().as_str().parse().unwrap();
            let right_value : i32 = caps.get(2).unwrap().as_str().parse().unwrap();
    
            
            let div = left_value / right_value;
            expresion = expresion.replace(cap_expression, &div.to_string());
        
        }
    loop{
        // Aplicar Multiplicacion
            let caps = re_mult.captures(expresion.as_str());
            if caps.is_none() {
                break;
            }
            let caps = caps.unwrap();
    
            let cap_expression = caps.get(0).unwrap().as_str();
            let left_value : i32 = caps.get(1).unwrap().as_str().parse().unwrap();
            let right_value : i32 = caps.get(2).unwrap().as_str().parse().unwrap();
    
            
            let mult = left_value * right_value;
            expresion = expresion.replace(cap_expression, &mult.to_string());
        
        }

    loop{
    // Aplicar Suma
        let caps = re_add.captures(expresion.as_str());
        if caps.is_none() {
            break;
        }
        let caps = caps.unwrap();

        let cap_expression = caps.get(0).unwrap().as_str();
        let left_value : i32 = caps.get(1).unwrap().as_str().parse().unwrap();
        let right_value : i32 = caps.get(2).unwrap().as_str().parse().unwrap();

        
        let addition = left_value + right_value;
        expresion = expresion.replace(cap_expression, &addition.to_string());
    
    }

    loop{
        // Aplicar Resta
            let caps = re_sub.captures(expresion.as_str());
            if caps.is_none() {
                break;
            }
            let caps = caps.unwrap();
    
            let cap_expression = caps.get(0).unwrap().as_str();
            let left_value : i32 = caps.get(1).unwrap().as_str().parse().unwrap();
            let right_value : i32 = caps.get(2).unwrap().as_str().parse().unwrap();
    
            
            let sub = left_value - right_value;
            expresion = expresion.replace(cap_expression, &sub.to_string());
        
        }

    // Mostrar resultado
    println!("Resultado: {}", expresion);
}